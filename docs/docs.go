// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/friends": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all friends for the authenticated user with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get user's friends list",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (must be a positive integer)",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (must be a positive integer)",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of friends",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/friend.FriendOutput"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/friends/requests": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of pending friend requests for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Get list of friend requests",
                "responses": {
                    "200": {
                        "description": "List of friend requests",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/friend.FriendRequestOutput"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Send a friend request to another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Send friend request",
                "parameters": [
                    {
                        "description": "Friend request data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.AddFriendRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request sent successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "409": {
                        "description": "Friend request already sent",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/friends/requests/{requestID}/accept": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Accept a pending friend request from another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Accept a friend request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Friend request ID to accept",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request accepted successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Friend request not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/friends/requests/{requestID}/reject": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reject a pending friend request from another user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Reject a friend request",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Friend request ID to reject",
                        "name": "requestID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend request rejected successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Friend request not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/friends/{friendID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Remove a user from the authenticated user's friends list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Friends"
                ],
                "summary": "Remove a friend",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of friend to remove",
                        "name": "friendID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Friend removed successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Friend not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Login with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.LoginOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Refresh access token using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refresh token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contains new access and refresh tokens",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.LoginOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user with name, email, password and avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.RegisterOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify": {
            "get": {
                "description": "Verify if the provided token is valid and return user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify authentication token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token with format: Bearer {token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid with user information",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.LoginOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Invalid or expired token",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Verify the registration code sent to user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify user registration code",
                "parameters": [
                    {
                        "description": "Email and verification code",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.VerifyRegistrationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/auth.RegisterOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request or verification failed",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all chat rooms the authenticated user belongs to with pagination support",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Get all user's chat rooms",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat rooms retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/chat.ChatRoomOutput"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new chat room with the authenticated user as owner",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Create a new chat room",
                "parameters": [
                    {
                        "description": "Chat room creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat.ChatRoomCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Chat room created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/chat.ChatRoomOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/private/{userID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Finds existing private chat room between current user and specified user, or creates a new one",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Find or create private chat room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Other User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat room found or created successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/chat.ChatRoomOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "User ID is required",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a specific chat room by its ID if user is a member",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Get chat room by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Chat room retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/chat.ChatRoomOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Chat room ID is required",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat room not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/{id}/leave": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows the authenticated user to leave a chat room",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Leave chat room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Left chat room successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Chat room ID is required",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat room not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/{id}/members": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds new members to an existing chat room",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Add members to chat room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Members to add",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chat.ChatRoomMembersInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Members added successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request format or no members specified",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "403": {
                        "description": "User not authorized to add members",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat room not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/{id}/members/{userID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a specific member from a chat room",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Remove member from chat room",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID to remove",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member removed successfully",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Chat room ID or Member ID is required",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "403": {
                        "description": "User not authorized to remove members",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat room or member not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/chat-rooms/{id}/messages": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves messages from a chat room with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chat Room"
                ],
                "summary": "Get chat room messages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat Room ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page (default: 20)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Messages retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/chat.MessageOutput"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Chat room ID is required",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "403": {
                        "description": "User not a member of chat room",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "Chat room not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Search for users by their name with pagination support",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Search users by name",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"john\"",
                        "description": "Name or partial name to search for",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "example": 1,
                        "description": "Page number for pagination results",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "example": 20,
                        "description": "Number of results per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users matching search criteria",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/handler.APIResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/profile.SearchUsersOutput"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Missing required parameters or invalid pagination values",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized access",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed profile information for a specific user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user profile details",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"123e4567-e89b-12d3-a456-426614174000\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "$ref": "#/definitions/profile.ProfileOutput"
                        }
                    },
                    "400": {
                        "description": "Invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/handler.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.LoginOutput": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "avatarUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "auth.RegisterOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "chat.ChatMemberOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "joined_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "chat.ChatRoomCreateInput": {
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "description": "\"GROUP\" or \"PRIVATE\"",
                    "type": "string"
                }
            }
        },
        "chat.ChatRoomMembersInput": {
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "chat.ChatRoomOutput": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_message": {
                    "$ref": "#/definitions/chat.MessageOutput"
                },
                "member_count": {
                    "type": "integer"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/chat.ChatMemberOutput"
                    }
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "chat.MessageOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "chat_room_id": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mime_type": {
                    "type": "string"
                },
                "sender_id": {
                    "type": "string"
                },
                "sender_name": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/domain.MessageType"
                }
            }
        },
        "domain.MessageType": {
            "type": "string",
            "enum": [
                "TEXT",
                "IMAGE",
                "VIDEO",
                "AUDIO",
                "FILE"
            ],
            "x-enum-varnames": [
                "TextMessageType",
                "ImageMessageType",
                "VideoMessageType",
                "AudioMessageType",
                "FileMessageType"
            ]
        },
        "friend.FriendOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "friend.FriendRequestOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "requester_id": {
                    "type": "string"
                },
                "requester_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "handler.APIResponse": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "handler.AddFriendRequest": {
            "type": "object",
            "required": [
                "friendId"
            ],
            "properties": {
                "friendId": {
                    "type": "string"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 6
                }
            }
        },
        "handler.VerifyRegistrationRequest": {
            "type": "object",
            "required": [
                "code",
                "email"
            ],
            "properties": {
                "code": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "profile.ProfileOutput": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "profile.SearchUsersOutput": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "total_count": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/profile.UserItem"
                    }
                }
            }
        },
        "profile.UserItem": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "GoChat Backend API",
	Description:      "A Real-time Chat Application Backend",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
