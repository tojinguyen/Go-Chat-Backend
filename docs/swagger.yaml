basePath: /api/v1
definitions:
  auth.LoginOutput:
    properties:
      accessToken:
        type: string
      avatarUrl:
        type: string
      email:
        type: string
      fullName:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      userId:
        type: string
    type: object
  auth.RegisterOutput:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  handler.APIResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handler.LoginRequest:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handler.VerifyRegistrationRequest:
    properties:
      code:
        type: string
      email:
        maxLength: 255
        type: string
    required:
    - code
    - email
    type: object
  profile.ProfileOutput:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  profile.SearchUsersOutput:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/profile.UserItem'
        type: array
    type: object
  profile.UserItem:
    properties:
      avatar_url:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A Real-time Chat Application Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoChat Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using a valid refresh token
      parameters:
      - description: 'Refresh token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Contains new access and refresh tokens
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user with name, email, password and avatar
      parameters:
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Avatar image
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.RegisterOutput'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify if the provided token is valid and return user information
      parameters:
      - description: 'Bearer token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid with user information
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Verify authentication token
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: Verify the registration code sent to user's email
      parameters:
      - description: Email and verification code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.VerifyRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.RegisterOutput'
              type: object
        "400":
          description: Invalid request or verification failed
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Verify user registration code
      tags:
      - Auth
  /profile/users:
    get:
      consumes:
      - application/json
      description: Search for users with pagination by their name
      parameters:
      - description: Name to search for
        in: query
        name: name
        required: true
        type: string
      - default: 1
        description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: 'Number of items per page (default: 10, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/profile.SearchUsersOutput'
              type: object
        "400":
          description: Name parameter is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Failed to search users
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Search users by name
      tags:
      - Profile
  /profile/users/{id}:
    get:
      consumes:
      - application/json
      description: Fetch a user's profile information by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.ProfileOutput'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile details
      tags:
      - Profile
swagger: "2.0"
