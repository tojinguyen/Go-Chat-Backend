basePath: /api/v1
definitions:
  auth.LoginOutput:
    properties:
      accessToken:
        type: string
      avatarUrl:
        type: string
      email:
        type: string
      fullName:
        type: string
      refreshToken:
        type: string
      role:
        type: string
      userId:
        type: string
    type: object
  auth.RegisterOutput:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  chat.ChatMemberOutput:
    properties:
      avatar_url:
        type: string
      joined_at:
        type: string
      name:
        type: string
      user_id:
        type: string
    type: object
  chat.ChatRoomCreateInput:
    properties:
      members:
        items:
          type: string
        type: array
      name:
        type: string
      type:
        description: '"GROUP" or "PRIVATE"'
        type: string
    type: object
  chat.ChatRoomMembersInput:
    properties:
      members:
        items:
          type: string
        type: array
    type: object
  chat.ChatRoomOutput:
    properties:
      created_at:
        type: string
      id:
        type: string
      last_message:
        $ref: '#/definitions/chat.MessageOutput'
      member_count:
        type: integer
      members:
        items:
          $ref: '#/definitions/chat.ChatMemberOutput'
        type: array
      name:
        type: string
      type:
        type: string
    type: object
  chat.MessageOutput:
    properties:
      avatar_url:
        type: string
      chat_room_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      mime_type:
        type: string
      sender_id:
        type: string
      sender_name:
        type: string
      type:
        $ref: '#/definitions/domain.MessageType'
    type: object
  cloudinaryinfra.UploadSignatureResponse:
    properties:
      api_key:
        type: string
      cloud_name:
        type: string
      folder:
        type: string
      public_id:
        type: string
      signature:
        type: string
      timestamp:
        type: string
    type: object
  domain.MessageType:
    enum:
    - TEXT
    - IMAGE
    - VIDEO
    - AUDIO
    - FILE
    type: string
    x-enum-varnames:
    - TextMessageType
    - ImageMessageType
    - VideoMessageType
    - AudioMessageType
    - FileMessageType
  friend.FriendOutput:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  friend.FriendRequestOutput:
    properties:
      avatar_url:
        type: string
      created_at:
        type: string
      id:
        type: string
      requester_id:
        type: string
      requester_name:
        type: string
      status:
        type: string
    type: object
  handler.APIResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  handler.AddFriendRequest:
    properties:
      friendId:
        type: string
    required:
    - friendId
    type: object
  handler.LoginRequest:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 255
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handler.VerifyRegistrationRequest:
    properties:
      code:
        type: string
      email:
        maxLength: 255
        type: string
    required:
    - code
    - email
    type: object
  profile.ProfileOutput:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  profile.SearchUsersOutput:
    properties:
      limit:
        type: integer
      page:
        type: integer
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/profile.UserItem'
        type: array
    type: object
  profile.UserItem:
    properties:
      avatar_url:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A Real-time Chat Application Backend
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GoChat Backend API
  version: "1.0"
paths:
  /api/v1/friends:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all friends for the authenticated user with
        pagination
      parameters:
      - description: Page number (must be a positive integer)
        in: query
        name: page
        required: true
        type: integer
      - description: Number of items per page (must be a positive integer)
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of friends
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/friend.FriendOutput'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user's friends list
      tags:
      - Friends
  /api/v1/friends/{friendID}:
    delete:
      consumes:
      - application/json
      description: Remove a user from the authenticated user's friends list
      parameters:
      - description: ID of friend to remove
        in: path
        name: friendID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Friend removed successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Friend not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Remove a friend
      tags:
      - Friends
  /api/v1/friends/requests:
    get:
      consumes:
      - application/json
      description: Retrieves a list of pending friend requests for the authenticated
        user
      produces:
      - application/json
      responses:
        "200":
          description: List of friend requests
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/friend.FriendRequestOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get list of friend requests
      tags:
      - Friends
    post:
      consumes:
      - application/json
      description: Send a friend request to another user
      parameters:
      - description: Friend request data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.AddFriendRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Friend request sent successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "409":
          description: Friend request already sent
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Send friend request
      tags:
      - Friends
  /api/v1/friends/requests/{requestID}/accept:
    post:
      consumes:
      - application/json
      description: Accept a pending friend request from another user
      parameters:
      - description: Friend request ID to accept
        in: path
        name: requestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Friend request accepted successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Friend request not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Accept a friend request
      tags:
      - Friends
  /api/v1/friends/requests/{requestID}/reject:
    post:
      consumes:
      - application/json
      description: Reject a pending friend request from another user
      parameters:
      - description: Friend request ID to reject
        in: path
        name: requestID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Friend request rejected successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Friend request not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Reject a friend request
      tags:
      - Friends
  /api/v1/uploads/file-signature:
    post:
      consumes:
      - application/json
      description: Generates a signature and parameters for direct client-side upload
        to Cloudinary for chat files.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated signature
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/cloudinaryinfra.UploadSignatureResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get Cloudinary Upload Signature
      tags:
      - Upload
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using a valid refresh token
      parameters:
      - description: 'Refresh token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Contains new access and refresh tokens
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - multipart/form-data
      description: Register a new user with name, email, password and avatar
      parameters:
      - description: User name
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      - description: Avatar image
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.RegisterOutput'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Register a new user
      tags:
      - Auth
  /auth/verify:
    get:
      consumes:
      - application/json
      description: Verify if the provided token is valid and return user information
      parameters:
      - description: 'Bearer token with format: Bearer {token}'
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Token is valid with user information
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.LoginOutput'
              type: object
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Verify authentication token
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: Verify the registration code sent to user's email
      parameters:
      - description: Email and verification code
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handler.VerifyRegistrationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/auth.RegisterOutput'
              type: object
        "400":
          description: Invalid request or verification failed
          schema:
            $ref: '#/definitions/handler.APIResponse'
      summary: Verify user registration code
      tags:
      - Auth
  /chat-rooms:
    get:
      description: Retrieves all chat rooms the authenticated user belongs to with
        pagination support
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Chat rooms retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/chat.ChatRoomOutput'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get all user's chat rooms
      tags:
      - Chat Room
    post:
      consumes:
      - application/json
      description: Creates a new chat room with the authenticated user as owner
      parameters:
      - description: Chat room creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.ChatRoomCreateInput'
      produces:
      - application/json
      responses:
        "201":
          description: Chat room created successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/chat.ChatRoomOutput'
              type: object
        "400":
          description: Invalid request format
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new chat room
      tags:
      - Chat Room
  /chat-rooms/{id}:
    get:
      description: Retrieves a specific chat room by its ID if user is a member
      parameters:
      - description: Chat Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Chat room retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/chat.ChatRoomOutput'
              type: object
        "400":
          description: Chat room ID is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Chat room not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get chat room by ID
      tags:
      - Chat Room
  /chat-rooms/{id}/leave:
    post:
      description: Allows the authenticated user to leave a chat room
      parameters:
      - description: Chat Room ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Left chat room successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Chat room ID is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Chat room not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Leave chat room
      tags:
      - Chat Room
  /chat-rooms/{id}/members:
    post:
      consumes:
      - application/json
      description: Adds new members to an existing chat room
      parameters:
      - description: Chat Room ID
        in: path
        name: id
        required: true
        type: string
      - description: Members to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/chat.ChatRoomMembersInput'
      produces:
      - application/json
      responses:
        "200":
          description: Members added successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Invalid request format or no members specified
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "403":
          description: User not authorized to add members
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Chat room not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Add members to chat room
      tags:
      - Chat Room
  /chat-rooms/{id}/members/{userID}:
    delete:
      description: Removes a specific member from a chat room
      parameters:
      - description: Chat Room ID
        in: path
        name: id
        required: true
        type: string
      - description: User ID to remove
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Member removed successfully
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "400":
          description: Chat room ID or Member ID is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "403":
          description: User not authorized to remove members
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Chat room or member not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Remove member from chat room
      tags:
      - Chat Room
  /chat-rooms/{id}/messages:
    get:
      description: Retrieves messages from a chat room with pagination
      parameters:
      - description: Chat Room ID
        in: path
        name: id
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/chat.MessageOutput'
                  type: array
              type: object
        "400":
          description: Chat room ID is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "403":
          description: User not a member of chat room
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: Chat room not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get chat room messages
      tags:
      - Chat Room
  /chat-rooms/private/{userID}:
    get:
      description: Finds existing private chat room between current user and specified
        user, or creates a new one
      parameters:
      - description: Other User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Chat room found or created successfully
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/chat.ChatRoomOutput'
              type: object
        "400":
          description: User ID is required
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Find or create private chat room
      tags:
      - Chat Room
  /users:
    get:
      consumes:
      - application/json
      description: Search for users by their name with pagination support
      parameters:
      - description: Name or partial name to search for
        example: '"john"'
        in: query
        name: name
        required: true
        type: string
      - default: 1
        description: Page number for pagination results
        example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 10
        description: Number of results per page
        example: 20
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of users matching search criteria
          schema:
            allOf:
            - $ref: '#/definitions/handler.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/profile.SearchUsersOutput'
              type: object
        "400":
          description: Missing required parameters or invalid pagination values
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Search users by name
      tags:
      - User
  /users/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves detailed profile information for a specific user by their
        ID
      parameters:
      - description: User ID
        example: '"123e4567-e89b-12d3-a456-426614174000"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/profile.ProfileOutput'
        "400":
          description: Invalid user ID format
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handler.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handler.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile details
      tags:
      - User
swagger: "2.0"
