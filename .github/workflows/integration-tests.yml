name: Integration Tests

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main", "develop" ]

env:
  GO_VERSION: '1.24.2'

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0.41-debian
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: chat_app_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -ptest_password"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10
          --health-start-period=30s

      redis:
        image: redis:7.2.4-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10
          --health-start-period=10s

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install MySQL and Redis clients
      run: |
        sudo apt-get update
        sudo apt-get install -y mysql-client redis-tools

    - name: Setup environment variables
      run: |
        cp .env.test .env
        echo "Environment variables loaded from .env.test"
        echo "Contents of .env file:"
        cat .env

    - name: Test database connectivity
      run: |
        chmod +x ./scripts/test-db-connectivity.sh
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        ./scripts/test-db-connectivity.sh

    - name: Wait for MySQL to be ready
      run: |
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        max_attempts=60
        attempt=1
        until mysqladmin ping -h"127.0.0.1" -P"3306" -u"root" -p"$MYSQL_PASSWORD" --silent 2>/dev/null; do
          if [ $attempt -gt $max_attempts ]; then
            echo "MySQL failed to start after $max_attempts attempts"
            exit 1
          fi
          echo "Waiting for MySQL... (attempt $attempt/$max_attempts)"
          sleep 2
          attempt=$((attempt + 1))
        done
        echo 'MySQL is ready!'

    - name: Wait for Redis to be ready
      run: |
        max_attempts=60
        attempt=1
        until redis-cli -h 127.0.0.1 -p 6379 ping > /dev/null 2>&1; do
          if [ $attempt -gt $max_attempts ]; then
            echo "Redis failed to start after $max_attempts attempts"
            exit 1
          fi
          echo "Waiting for Redis... (attempt $attempt/$max_attempts)"
          sleep 2
          attempt=$((attempt + 1))
        done
        echo 'Redis is ready!'

    - name: Run database migrations
      run: |
        echo "Current working directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "Contents of .env file:"
        cat .env | head -20
        echo "Running migrations..."
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        go run ./cmd/migrate/main.go

    - name: Run integration tests
      run: |
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        go test -v -tags=integration ./tests/integration/...

    - name: Run integration tests with coverage
      run: |
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        go test -v -tags=integration -coverprofile=integration-coverage.out ./tests/integration/...

    - name: Upload integration test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./integration-coverage.out
        flags: integration-tests
        name: codecov-integration
        fail_ci_if_error: false

    - name: Cleanup test database
      if: always()
      run: |
        # Load environment variables from .env file
        export $(grep -v '^#' .env | xargs)
        mysql -h127.0.0.1 -P3306 -uroot -p"$MYSQL_PASSWORD" -e "DROP DATABASE IF EXISTS $MYSQL_DATABASE;"
